@{
    ViewData["Title"] = "Create";
}

<h1>작성</h1>

<hr />

@{
    ViewBag.Title = "Category Select";
}

@using (Html.BeginForm("Upload", "RX", FormMethod.Post, new { id = "frmRXUpload", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
}

<style>
    .dropzone {
        width: 98%;
        margin: 1%;
        border: 2px dashed #3498db !important;
        border-radius: 5px;
        -webkit-transition: .2s;
        transition: .2s;
    }

        .dropzone.dz-drag-hover {
            border: 2px solid #3498db !important;
        }

    .dz-message.needsclick img {
        width: 50px;
        display: block;
        margin: auto;
        opacity: .6;
        margin-bottom: 15px;
    }

    span.plus {
        display: none;
    }

    .dropzone.dz-started .dz-message {
        display: inline-block !important;
        width: 120px;
        float: right;
        border: 1px solid rgba(238, 238, 238, 0.36);
        border-radius: 30px;
        height: 120px;
        margin: 16px;
        -webkit-transition: .2s;
        transition: .2s;
    }

        .dropzone.dz-started .dz-message span.text {
            display: none;
        }

        .dropzone.dz-started .dz-message span.plus {
            display: block;
            font-size: 70px;
            color: #AAA;
            line-height: 110px;
        }
</style>

<div class="row">
    <div class="col-md-4">
        <div id="dropzone">
            <form action="https://localhost:7109/Posts/Create" class="dropzone" id="myDropzone" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="dz-message needsclick">
                    <span class="text">
                        <img src="https://www.freeiconspng.com/uploads/------------------------------iconpngm--22.png" alt="Camera" />
                        파일을 여기에 놓거나 클릭하여 업로드합니다.
                    </span>
                    <span class="plus">+</span>
                </div>
            </form>
        </div>
        @Html.DropDownList("Categories")
        <input type="hidden" value="1" name="CategoryValue" id="CategoryValue" required />
        <div>
            <label class="control-label">제목</label>
            <input id="title" name="title" type="text" class="form-control" maxlength="20" required />
            <span class="text-danger"></span>
        </div>
        <div>
            <label class="control-label">내용</label>
            <textarea id="contents" name="contents" class="form-control" style="resize: none;" maxlength="200" rows="6" required></textarea>
            <span class="text-danger"></span>
        </div>
        <br />
        <div>
            <input id="submit-all" type="submit" value="작성" class="btn btn-primary" /> |
            <a class="btn btn-primary" asp-action="Index">목록으로</a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var e = document.getElementById("Categories");
        function onChange() {
            var p = document.getElementById("CategoryValue");
            p.value = e.value
        }
        e.onchange = onChange;

        // Specification : [
        //     파일 썸네일 생성,
        //     업로드 후 파일 삭제버튼,
        //     API에 넘기는 주소 : uploadFile,
        //     파일 최대 첨부 가능 개수 : 3,
        //     파일 최대 용량 : 100 MB,
        //     파일 최대 첨부 가능 개수 초과시 에러메시지 출력 + 파일 첨부 불가능,
        //     파일 최대 용량 초과시 에러메시지 출력 + 파일 첨부 불가능,
        //     그 밖의 알수없는 에러 발생시 에러메시지 출력
        // ]

        Dropzone.options.myDropzone = {
            createImageThumbnails: true, // 파일 썸네일 생성
            url: 'https://localhost:7109/Posts/Create', // 파일을 업로드할 서버 주소
            method: 'POST', // Controller에 넘길 메소드
            addRemoveLinks: true, // 업로드 후 파일 삭제버튼 표시 여부
            dictRemoveFile: '업로드 취소', // 삭제버튼 표시 텍스트
            autoProcessQueue: false, // false: this.processQueue() 호출시 전송 / true: dropzone에 올리면 자동으로 서버에 전송
            paramName: "uploadFile", // formdata 이름
            maxFiles: 3, // 파일 개수
            maxFilesize: 100, // 파일 용량 MB단위
            timeout: 300000, // 커넥션 타임아웃 설정 -> 데이터가 클 경우 300초 기다리기
            uploadMultiple: true, // 다중 업로드 기능
            parallelUploads: 3, // 동시 파일 업로드 수

            init: function () {
                var myDropzone = this;
                // 업로드 버튼 클릭 시 processQueue() 함수 호출로 서버에 데이터 전송
                document.querySelector("#submit-all").addEventListener("click", function (e) {
                    // 이벤트가 있어야 실행?
                    e.preventDefault();

                    // 파일 업로드를 안할 때
                    if (myDropzone.files.length == 0) {
                        var formData = new FormData();
                        formData.append('title', document.getElementById('title').value);
                        formData.append('contents', document.getElementById('contents').value);
                        formData.append('CategoryValue', document.getElementById('CategoryValue').value);

                        fetch('Create', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.getElementsByName("__RequestVerificationToken")[1].value
                            },
                            body: formData,
                            contentType: false
                        })
                            .then((SUCCESS) => {
                                window.location.href = '/'
                            })
                    } else {
                        myDropzone.processQueue();
                    }
                });
                this.on('sending', function (file, xhr, formData) {
                    // foemData에 Validate 넣기
                    formData["__RequestAntiForgeryToken"] = document.getElementsByName("__RequestVerificationToken")[1].value;
                    console.log('보내는 중')
                    // title, contents, category를 formData로 만들어서 서버에 보내기
                    formData.append('title', document.getElementById('title').value);
                    formData.append('contents', document.getElementById('contents').value);
                    formData.append('CategoryValue', document.getElementById('CategoryValue').value);
                });
                this.on('success', function (file, responseText) {
                    console.log('성공');
                    window.location.href = '/'
                });
                this.on('maxfilesexceeded', function (file) {
                    this.removeFile(file);
                    alert('최대' + this.options.maxFiles + ' 개의 파일만 업로드할 수 있습니다.');
                });
                this.on('error', function (file, errorMessage) {
                    if (file.size > this.options.maxFilesize * 1024 * 1024) {
                        this.removeFile(file);
                        alert('업로드 파일은' + this.options.maxFilesize + ' MB 이하만 가능합니다.');
                        // 에러 메시지가 파일을 더 넣을수 없다고 기본값으로 날아올 때가 아닐 때 alert을 errorMessage로 띄운다.
                    } else if (errorMessage !== 'You can not upload any more files.') {
                        this.removeFile(file);
                        alert(errorMessage);
                    }
                });
            }
        }
    </script>
}
